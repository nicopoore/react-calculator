[{"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\reportWebVitals.js":"1","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\App.js":"2","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\index.js":"3","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Button.js":"4","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\NumPad.js":"5","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Output.js":"6","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Input.js":"7","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Author.js":"8","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\index.js":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":2189,"mtime":1606358331856,"results":"12","hashOfConfig":"11"},{"size":134,"mtime":1606358271908,"results":"13","hashOfConfig":"11"},{"size":3956,"mtime":1606416407860,"results":"14","hashOfConfig":"11"},{"size":674,"mtime":1606416211316,"results":"15","hashOfConfig":"11"},{"size":325,"mtime":1606349204389,"results":"16","hashOfConfig":"11"},{"size":317,"mtime":1606350613013,"results":"17","hashOfConfig":"11"},{"size":205,"mtime":1606358050533,"results":"18","hashOfConfig":"11"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ptgfrr",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\reportWebVitals.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\App.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\index.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Button.js",["39"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Button extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.updateInput = this.updateInput.bind(this)\r\n  }\r\n  \r\n  handleClick = () => {\r\n    this.updateInput()\r\n    this.updateOutput()\r\n  }\r\n\r\n  evalEquation = (equation) => {\r\n    try {\r\n      return (Math.round(1000000000000 * eval(equation.replace(/x/g, '*'))) / 1000000000000).toString()\r\n    } catch (e) {\r\n      if (e instanceof SyntaxError) {\r\n        return 'NaN'\r\n      }\r\n    }\r\n  }\r\n\r\n  handleEmpty = (empty) => {\r\n    if(empty.charAt(0) === '0' && empty.charAt(1) !== '.') {\r\n      return parseInt(empty).toString()\r\n    } else return empty\r\n  }\r\n\r\n  updateInput = () => {\r\n    let newInput\r\n\r\n    switch (this.props.buttonType) {\r\n      case 'clear':\r\n        newInput = ''\r\n        break;\r\n      case 'equals':\r\n        newInput = this.evalEquation(this.props.input)\r\n        break;\r\n      case 'number':\r\n        if (this.props.output.length >= 20) {\r\n          newInput = this.props.input\r\n        } else {\r\n          newInput = this.props.input.concat(this.props.content).toString()\r\n        }\r\n        break;\r\n      case 'decimal':\r\n        if (this.props.output.length >= 20) {\r\n          newInput = this.props.input\r\n        } else if(this.props.output.match(/\\.+/)) {\r\n          newInput = this.props.input\r\n        } else if(isNaN(this.props.input.charAt(this.props.input.length-1)) || this.props.input === '') {\r\n          newInput = this.props.input.concat('0.')\r\n        } else {\r\n          newInput = this.props.input.concat(this.props.content)\r\n        }\r\n        break;\r\n      case 'operation':\r\n        if(this.props.content === '-' && this.props.output === '-') {\r\n          newInput = this.props.input\r\n        } else if((isNaN(this.props.output) && this.props.content !== '-')) {\r\n          newInput = this.props.input.replace(/\\D*$/, this.props.content)\r\n        } else {\r\n          newInput = this.props.input.concat(this.props.content)\r\n        }\r\n        break;\r\n      default:\r\n        newInput = this.props.input\r\n    }\r\n\r\n    newInput = this.handleEmpty(newInput)\r\n\r\n    this.props.dispatch({\r\n      type: 'UPDATE_INPUT',\r\n      input: newInput\r\n    })\r\n  }\r\n\r\n  updateOutput = () => {\r\n    let newOutput\r\n    switch (this.props.buttonType) {\r\n      case 'clear':\r\n        newOutput = '0'\r\n        break;\r\n      case 'equals':\r\n        newOutput = this.evalEquation(this.props.input)\r\n        break;\r\n      case 'operation':\r\n        newOutput = this.props.content\r\n        break;\r\n      case 'decimal':\r\n        if (this.props.output.length >= 20) {\r\n          newOutput = this.props.output\r\n        } else if(this.props.output.match(/\\.+/)) {\r\n          newOutput = this.props.output\r\n        } else if(this.props.output === '0') {\r\n          newOutput = '0.'\r\n        } else {\r\n          newOutput = this.props.output.concat(this.props.content)\r\n        }\r\n        break;\r\n      case 'number':\r\n        if (this.props.output.length >= 20) {\r\n          newOutput = this.props.output\r\n        } else if (this.props.output.match(/\\.$/)) {\r\n          newOutput = this.props.output.concat(this.props.content)\r\n        } else {\r\n          newOutput = this.props.output.concat(this.props.content).replace(/(?!\\.)\\W*x*/g, \"\")\r\n        }\r\n        break;\r\n      default:\r\n        newOutput = this.props.output\r\n        break;\r\n    }\r\n\r\n    newOutput = this.handleEmpty(newOutput)\r\n\r\n    this.props.dispatch({\r\n      type: 'UPDATE_OUTPUT',\r\n      output: newOutput\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const divId = this.props.id.concat('-div')\r\n    return (\r\n      <div id={divId} className=\"padButton\">\r\n        <button id={this.props.id} onClick={this.handleClick}>{this.props.content}</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  input: state.input,\r\n  output: state.output,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Button)","C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\NumPad.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Output.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Input.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\components\\Author.js",[],"C:\\Users\\Nicolas\\Documents\\GitHub\\fCC\\calculator\\calculator\\src\\index.js",[],{"ruleId":"40","severity":1,"message":"41","line":17,"column":42,"nodeType":"42","messageId":"43","endLine":17,"endColumn":46},"no-eval","eval can be harmful.","CallExpression","unexpected"]